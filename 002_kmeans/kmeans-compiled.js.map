{"version":3,"sources":["kmeans.js"],"names":[],"mappings":"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","file":"kmeans-compiled.js","sourcesContent":["'use strict'\n//Again, I'll start this off with the very beginning of the constructor function.\nfunction KMeans(options){\n\tif (options == undefined){options = {};}\n\tthis.minClusterMove = options.minClusterMove || 0.0001;\n\tthis.clusterAttempts = 2;\n\tthis.points = [];\n}\n\nKMeans.prototype.train = function (points) {\n\tthis.points = this.points.concat(points);\n};\n\nKMeans.prototype._distance = function(vectorA, vectorB) {\n\n\treturn Math.sqrt(vectorA.reduce(function(prev, curr, idx) {\n\t\treturn prev + Math.pow(curr - vectorB[idx], 2);\n\t}, 0))\n};\n\nKMeans.prototype._max = function(vector, fn) {\n\tvar max = fn(vector[0], 0),\n\t\tmaxVal = vector[0],\n\t\ttest;\n\tfor (let i = 1; i < vector.length; i++) {\n\t\ttest = fn(vector[i], i);\n\t\tif (test > max) {\n\t\t\tmax = test;\n\t\t\tmaxVal = vector[i];\n\t\t}\n\t}\n\treturn maxVal;\n};\n\nKMeans.prototype._clusterEvaluator = function (centroids, vectors) {\n\tvar self = this,\n\t\tdists = [],\n\t\tsumSqDists = 0;\n\tvectors.forEach(function(el) {\n\t\tfor (let i = 0; i < centroids.length; i++) {\n\t\t\tdists.push(Math.pow(self._distance(el, centroids[i]),2))\n\t\t}\n\t\tsumSqDists += Math.min.apply(null, dists);\n\t\tdists = [];\n\t});\n\treturn sumSqDists;\n};\n\nKMeans.prototype._averageLocation = function (vectors) {\n\tvar divisor = vectors.length,\n\t\tcentroid = [];\n\tvectors.forEach(function (vector) {\n\t\tfor (let i = 0; i < vector.length; i++) {\n\t\t\tif (centroid[i]) centroid[i] += vector[i]/divisor;\n\t\t\telse centroid[i] = vector[i]/divisor;\n\t\t}\n\t});\n\treturn centroid;\n};\n\nKMeans.prototype._shiftCentroids = function (centroids, tD) {\n\tvar self = this, clusters = [], closestIdx, dists = [];\n\ttD.forEach(function (vector) {\n\t\tfor (let i = 0; i < centroids.length; i++) {\n\t\t\tdists.push(Math.pow(self._distance(vector, centroids[i]),2))\n\t\t}\n\t\tclosestIdx = dists.indexOf(Math.min.apply(null, dists));\n\t\t(clusters[closestIdx]) ? clusters[closestIdx].push(vector) :clusters[closestIdx] = [vector];\n\t\tdists = [];\n\t});\n\treturn clusters.map(function(cluster){ return self._averageLocation(cluster)})\n};\n\nKMeans.prototype._haveShifted = function (before, after) {\n\tvar self = this;\n\treturn before.some(function(el, idx) {\n\t\treturn self._distance(el, after[idx]) > 0;\n\t})\n};\n\nKMeans.prototype._clusters = function (k, tD) {\n\tvar self = this,\n\t\tcentroids = forgyMethod(k, tD.length).map(function(el){return tD[el];}),\n\t\tnewCentroids;\n\tfunction minDistance (centroids, tD) {\n\t\tnewCentroids = self._shiftCentroids(centroids, tD);\n\t\tif (self._haveShifted(centroids, newCentroids)) return minDistance(newCentroids, tD);\n\t\telse return newCentroids;\n\t}\n\treturn minDistance(centroids, tD);\n};\n\nKMeans.prototype._manyClusters = function (rounds, k) {\n\tvar centroids = [];\n\tfor (let i = 0; i < rounds; i++) {\n\t\tcentroids.push(this._clusters(k, this.points));\n\t}\n\treturn centroids;\n};\n\nKMeans.prototype.clusters = function(clusterNum){\n\tvar self = this;\n\treturn self._max( self._manyClusters( self.clusterAttempts, clusterNum ) , function(cluster){\n\t\treturn -self._clusterEvaluator(cluster, self.points);\n\t});\n};\n\nKMeans.prototype.findClusters = function(maxClusters) {\n\tvar self = this;\n\tvar results = [];\n\tvar ans;\n\tfor (let i = 1; i <= maxClusters; i++) {\n\t\tvar bestCentroids = self.clusters(i);\n\t\tvar score = self._clusterEvaluator(bestCentroids, self.points);\n\t\tresults.push([score,bestCentroids]);\n\t}\n\tfor (let i = 1; i < results.length; i++) {\n\t\tvar change = (results[i][0] - results[i-1][0]) / results[i-1][0];\n\t\tresults[i].push(-change);\n\t}\n\tvar max = -1000000;\n\tresults.forEach(function(el) {\n\t\tconsole.log(el[2]);\n\t\tif (el[2] > max) {\n\t\t\tans = el[1];\n\t\t\tmax = el[2];\n\t\t}\n\t});\n\treturn ans;\n};\n\nfunction forgyMethod (k, vectorCount) {\n\tvar indexes = [],\n\t\tidx;\n\twhile(indexes.length < k) {\n\t\tidx = Math.round(Math.random() * (vectorCount-1));\n\t\tif (indexes.indexOf(idx) === -1) indexes.push(idx);\n\t}\n\treturn indexes;\n}\n\nmodule.exports = KMeans"]}