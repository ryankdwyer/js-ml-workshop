{"version":3,"sources":["kmeans.js"],"names":[],"mappings":"AAAA,YAAY,CAAA;;AAEZ,SAAS,MAAM,CAAC,OAAO,EAAC;AACvB,KAAI,OAAO,IAAI,SAAS,EAAC;AAAC,SAAO,GAAG,EAAE,CAAC;EAAC;AACxC,KAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,MAAM,CAAC;AACvD,KAAI,CAAC,eAAe,GAAG,EAAE,CAAC;AAC1B,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;CACjB;;AAED,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,MAAM,EAAE;AAC1C,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;CACzC,CAAC;;AAEF,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,YAAY,EAEvC,CAAC;;AAEF,MAAM,CAAC,SAAS,CAAC,SAAS,GAAG,UAAS,OAAO,EAAE,OAAO,EAAE;AACvD,QAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAS,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE;AAC9D,SAAO,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/C,EAAE,CAAC,CAAC,CAAC,CAAA;CACN,CAAC;;AAEF,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,UAAS,MAAM,EAAE,EAAE,EAAE;AAC5C,KAAI,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KACzB,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;KAClB,IAAI,CAAC;AACN,MAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvC,MAAI,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACxB,MAAI,IAAI,GAAG,GAAG,EAAE;AACf,MAAG,GAAG,IAAI,CAAC;AACX,SAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;GACnB;EACD;AACD,QAAO,MAAM,CAAC;CACd,CAAC;;AAEF,MAAM,CAAC,SAAS,CAAC,iBAAiB,GAAG,UAAU,QAAQ,EAAE,OAAO,EAAE;AACjE,KAAI,IAAI,GAAG,IAAI;KACd,KAAK,GAAG,EAAE;KACV,UAAU,GAAG,CAAC,CAAC;AAChB,QAAO,CAAC,OAAO,CAAC,UAAS,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE;AACtC,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACzC,QAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAA;GACvD;AACD,YAAU,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC1C,OAAK,GAAG,EAAE,CAAC;EACX,CAAC,CAAC;AACH,QAAO,UAAU,CAAC;CAClB,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,MAAM,CAAA","file":"kmeans-compiled.js","sourcesContent":["'use strict'\n//Again, I'll start this off with the very beginning of the constructor function.\nfunction KMeans(options){\n\tif (options == undefined){options = {};}\n\tthis.minClusterMove = options.minClusterMove || 0.0001;\n\tthis.clusterAttempts = 10;\n\tthis.points = [];\n}\n\nKMeans.prototype.train = function (points) {\n\tthis.points = this.points.concat(points);\n};\n\nKMeans.prototype.clusters = function () {\n\n};\n\nKMeans.prototype._distance = function(vectorA, vectorB) {\n\treturn Math.sqrt(vectorA.reduce(function(prev, curr, idx, arr) {\n\t\treturn prev + Math.pow(curr - vectorB[idx], 2);\n\t}, 0))\n};\n\nKMeans.prototype._max = function(vector, fn) {\n\tvar max = fn(vector[0], 0),\n\t\tmaxVal = vector[0],\n\t\ttest;\n\tfor (let i = 1; i < vector.length; i++) {\n\t\ttest = fn(vector[i], i);\n\t\tif (test > max) {\n\t\t\tmax = test;\n\t\t\tmaxVal = vector[i];\n\t\t}\n\t}\n\treturn maxVal;\n};\n\nKMeans.prototype._clusterEvaluator = function (clusters, vectors) {\n\tvar self = this,\n\t\tdists = [],\n\t\tsumSqDists = 0;\n\tvectors.forEach(function(el, idx, arr) {\n\t\tfor (let i = 0; i < clusters.length; i++) {\n\t\t\tdists.push(Math.pow(self._distance(el, clusters[i]),2))\n\t\t}\n\t\tsumSqDists += Math.min.apply(null, dists);\n\t\tdists = [];\n\t});\n\treturn sumSqDists;\n};\n\nmodule.exports = KMeans"]}